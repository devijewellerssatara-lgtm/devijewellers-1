# Replace your-domain.tld with your real domain.
# This assumes your Node app listens on 127.0.0.1:3000
# and you run Nginx on the same server.

server {
  listen 80;
  listen [::]:80;
  server_name your-domain.tld www.your-domain.tld;

  # Redirect all HTTP to HTTPS (after cert issuance)
  # Comment this section out for initial cert issuance if needed.
  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name your-domain.tld www.your-domain.tld;

  # Managed by certbot or provide your own certificates
  ssl_certificate /etc/letsencrypt/live/your-domain.tld/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/your-domain.tld/privkey.pem;

  # Security and performance (basic)
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  # Recommended TLS versions and ciphers (adjust as needed)
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:
               ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:
               ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305';

  # Proxy to Node app
  location / {
    proxy_pass http://127.0.0.1:3000;
    proxy_http_version 1.1;

    # Preserve host and IP
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # WebSocket support
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # Optional: serve uploaded assets via proxy cache rules, rate limiting, etc.
}